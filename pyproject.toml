[tool.poetry]
name = "backend"
version = "0.1.0"
description = "Both a recipe website & a shopping list service for you to never forget what you need to buy for the fancy meal you're planning to cook."
authors = ["Kirill Koovshinov <k.koovshinov@gmail.com>"]
license = "MIT"
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = "^3.10"
djangorestframework-stubs = "3.14.5"
django-stubs = "4.2.7"
django-cleanup = "8.1.0"
django-debug-toolbar = "4.3.0"
python-dotenv = "1.0.1"
djangorestframework = "3.15.2"
djoser = "2.3.0"
asgiref = "3.8.1"
certifi = "2024.7.4"
cffi = "1.16.0"
chardet = "5.2.0"
charset-normalizer = "3.3.2"
click = "8.1.7"
colorama = "0.4.6"
cryptography = "42.0.5"
defusedxml = "0.7.1"
django-cors-headers = "4.3.1"
django-filter-stubs = "0.1.3"
django-filter = "23.5"
django-stubs-ext = "4.2.7"
django-templated-mail = "1.1.1"
django = "5.1.4"
djangorestframework-simplejwt = "5.4.0"
drf-extra-fields = "3.7.0"
exceptiongroup = "1.2.0"
filetype = "1.2.0"
gunicorn = "22.0.0"
idna = "3.7"
iniconfig = "2.0.0"
joblib = "1.3.2"
mypy-extensions = "1.0.0"
mypy = "1.9.0"
nltk = "3.9"
numpy = "1.26.4"
oauthlib = "3.2.2"
packaging = "24.0"
pandas = "2.2.1"
pillow = "10.3.0"
polib = "1.2.0"
psycopg2 = "2.9.9"
pycparser = "2.21"
pyjwt = "2.8.0"
pytest-django = "4.8.0"
python-dateutil = "2.9.0.post0"
python3-openid = "3.2.0"
pytz = "2024.1"
pyyaml = "6.0.1"
regex = "2023.12.25"
reportlab-stubs = "3.6.9.post0"
reportlab = "4.1.0"
requests-oauthlib = "2.0.0"
scipy = "1.12.0"
six = "1.16.0"
social-auth-app-django = "5.4.1"
social-auth-core = "4.5.3"
sqlparse = "0.5.0"
tomli = "2.0.1"
tqdm = "4.66.3"
types-psycopg2 = "2.9.21.20240311"
types-pytz = "2024.1.0.20240203"
types-pyyaml = "6.0.12.20240311"
types-requests = "2.31.0.20240311"
typing-extensions = "4.10.0"
tzdata = "2024.1"
urllib3 = "2.2.2"
webcolors-stubs = "0.0.3"
webcolors = "1.13"
types-regex = "^2023.12.25.20240311"
django-rosetta = "^0.10.0"
poetry = "^2.0.0"
requests = "^2.32.3"
pluggy = "^1.5.0"
pytest = "^8.3.4"


[tool.poetry.group.dev.dependencies]
mypy = "^1.9.0"
ruff = "^0.3.4"
isort = "^5.13.2"
deptry = "^0.23.0"

#[tool.isort]
#profile = "django"
#lines_after_imports = 2
## known_django="django"
#known_first_party = "api"
#no_lines_before = "LOCALFOLDER"
#sections="FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 79
indent-width = 4
target-version = "py310"  # Adjust to your Python version

[tool.ruff.lint.pycodestyle]
max-line-length = 79

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

