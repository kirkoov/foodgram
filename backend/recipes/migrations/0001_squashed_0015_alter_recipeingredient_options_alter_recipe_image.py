# Generated by Django 5.0.2 on 2024-02-26 12:59

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import recipes.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    replaces = [
        ("recipes", "0001_initial"),
        ("recipes", "0002_shoppingcart_unique_shoppping_user_recipe"),
        (
            "recipes",
            "0003_remove_favorite_unique_favorite_user_recipe_and_more",
        ),
        ("recipes", "0004_favorite_unique_favorite_user_recipe_and_more"),
        ("recipes", "0005_alter_shoppingcart_recipe_alter_shoppingcart_user"),
        (
            "recipes",
            "0006_remove_shoppingcart_unique_shoppping_user_recipe_and_more",
        ),
        ("recipes", "0007_alter_favorite_recipe_alter_favorite_user_and_more"),
        ("recipes", "0008_alter_subscription_author"),
        ("recipes", "0009_alter_subscription_user"),
        ("recipes", "0010_alter_subscription_author_alter_subscription_user"),
        ("recipes", "0011_subscription_user_cannot_subscribe_to_themselves"),
        ("recipes", "0012_alter_tag_options_remove_tag_output_order"),
        ("recipes", "0013_delete_subscription"),
        ("recipes", "0014_alter_recipe_options_and_more"),
        ("recipes", "0015_alter_recipeingredient_options_alter_recipe_image"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Enter a unique ingredient name",
                        max_length=200,
                        verbose_name="ingredient name",
                    ),
                ),
                (
                    "measurement_unit",
                    models.CharField(
                        help_text="In grams, pieces, to taste, etc",
                        max_length=200,
                        verbose_name="measurement unit",
                    ),
                ),
            ],
            options={
                "verbose_name": "ingredient",
                "verbose_name_plural": "ingredients",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Enter a name for your recipe",
                        max_length=200,
                        verbose_name="recipe name",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        default=None,
                        help_text="Upload a <=3MB image for your recipe",
                        upload_to="recipes/",
                        verbose_name="recipe image",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Describe how to cook",
                        verbose_name="recipe description",
                    ),
                ),
                (
                    "cooking_time",
                    models.PositiveSmallIntegerField(
                        help_text="Enter now many minutes it needs to cook",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(525960),
                        ],
                        verbose_name="cooking time",
                    ),
                ),
                (
                    "pub_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="published on"
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe",
                "verbose_name_plural": "recipes",
                "ordering": ("-pub_date",),
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(
                        help_text="Enter a quantity of this to use in cooking",
                        verbose_name="quantity",
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe ingredient",
                "verbose_name_plural": "recipe ingredients",
                "ordering": ("amount",),
                "default_related_name": "recipe_ingredient",
            },
        ),
        migrations.CreateModel(
            name="ShoppingCart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "shopping_cart",
                "verbose_name_plural": "shopping_carts",
                "ordering": ("user",),
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "subscription",
                "verbose_name_plural": "subscriptions",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Enter an occasion to eat on, e.g. breakfast, etc.",
                        max_length=200,
                        unique=True,
                        verbose_name="occasion name",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Enter a unique HEX value with the #",
                        max_length=7,
                        null=True,
                        unique=True,
                        validators=[recipes.validators.validate_hex_color],
                        verbose_name="colour",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Enter a unique slug",
                        max_length=200,
                        null=True,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "output_order",
                    models.PositiveSmallIntegerField(
                        verbose_name="output order"
                    ),
                ),
            ],
            options={
                "verbose_name": "mealtime",
                "verbose_name_plural": "mealtimes",
                "ordering": ("output_order",),
            },
        ),
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorites",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="custom user",
                    ),
                ),
            ],
            options={
                "verbose_name": "favourite",
                "verbose_name_plural": "favourites",
                "ordering": ("user",),
            },
        ),
        migrations.AddConstraint(
            model_name="ingredient",
            constraint=models.UniqueConstraint(
                fields=("name", "measurement_unit"),
                name="unique_ingredient_measurement_unit",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recipes",
                to=settings.AUTH_USER_MODEL,
                verbose_name="author",
            ),
        ),
        migrations.AddField(
            model_name="favorite",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="favorites",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AddField(
            model_name="recipeingredient",
            name="ingredient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="recipes.ingredient",
                verbose_name="ingredient",
            ),
        ),
        migrations.AddField(
            model_name="recipeingredient",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="ingredients",
            field=models.ManyToManyField(
                through="recipes.RecipeIngredient",
                to="recipes.ingredient",
                verbose_name="ingredients",
            ),
        ),
        migrations.AddField(
            model_name="shoppingcart",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="shopping",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AddField(
            model_name="shoppingcart",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="shopping",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AddField(
            model_name="subscription",
            name="author",
            field=models.ForeignKey(
                help_text="which author",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subscribed_by",
                to=settings.AUTH_USER_MODEL,
                verbose_name="author",
            ),
        ),
        migrations.AddField(
            model_name="subscription",
            name="user",
            field=models.ForeignKey(
                help_text="Who subscribes",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subscribed_to",
                to=settings.AUTH_USER_MODEL,
                verbose_name="subscriber",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="tags",
            field=models.ManyToManyField(
                to="recipes.tag", verbose_name="mealtimes"
            ),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_favorite_user_recipe"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "author"), name="unique_user_author_subscribe"
            ),
        ),
        migrations.AddConstraint(
            model_name="recipe",
            constraint=models.UniqueConstraint(
                fields=("author", "name"), name="unique_name_user_recipe"
            ),
        ),
        migrations.AddConstraint(
            model_name="shoppingcart",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_shoppping_user_recipe"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="favorite",
            name="unique_favorite_user_recipe",
        ),
        migrations.RemoveConstraint(
            model_name="shoppingcart",
            name="unique_shoppping_user_recipe",
        ),
        migrations.AlterField(
            model_name="favorite",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="favorite",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_favorite_user_recipe"
            ),
        ),
        migrations.AddConstraint(
            model_name="shoppingcart",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_shoppping_user_recipe"
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="shopping",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="shopping",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="shoppingcart",
            name="unique_shoppping_user_recipe",
        ),
        migrations.AlterField(
            model_name="favorite",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_recipe",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="favorite",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_user",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_recipe",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_user",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AddConstraint(
            model_name="shoppingcart",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_shopping_user_recipe"
            ),
        ),
        migrations.AlterField(
            model_name="favorite",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="favorite",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to="recipes.recipe",
                verbose_name="recipe",
            ),
        ),
        migrations.AlterField(
            model_name="shoppingcart",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="custom user",
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="author",
            field=models.ForeignKey(
                help_text="which recipe author",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="is_subscribed",
                to=settings.AUTH_USER_MODEL,
                verbose_name="subscribed author",
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="user",
            field=models.ForeignKey(
                help_text="Who subscribes",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="is_subscriber",
                to=settings.AUTH_USER_MODEL,
                verbose_name="subscriber",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.CheckConstraint(
                check=models.Q(("author", models.F("user")), _negated=True),
                name="user_cannot_subscribe_to_themselves",
            ),
        ),
        migrations.AlterModelOptions(
            name="tag",
            options={
                "verbose_name": "mealtime",
                "verbose_name_plural": "mealtimes",
            },
        ),
        migrations.RemoveField(
            model_name="tag",
            name="output_order",
        ),
        migrations.DeleteModel(
            name="Subscription",
        ),
        migrations.AlterModelOptions(
            name="recipe",
            options={
                "default_related_name": "recipes",
                "ordering": ("-pub_date",),
                "verbose_name": "recipe",
                "verbose_name_plural": "recipes",
            },
        ),
        migrations.RemoveConstraint(
            model_name="favorite",
            name="unique_favorite_user_recipe",
        ),
        migrations.RemoveConstraint(
            model_name="recipe",
            name="unique_name_user_recipe",
        ),
        migrations.AlterField(
            model_name="recipe",
            name="image",
            field=models.ImageField(
                help_text="Upload a <=3MB image for your recipe",
                upload_to="recipes/",
                verbose_name="recipe image",
            ),
        ),
        migrations.AlterField(
            model_name="recipeingredient",
            name="amount",
            field=models.PositiveSmallIntegerField(
                help_text="Enter a quantity of this to use in cooking",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(1000),
                ],
                verbose_name="quantity",
            ),
        ),
        migrations.AlterField(
            model_name="recipeingredient",
            name="ingredient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                to="recipes.ingredient",
                verbose_name="ingredient",
            ),
        ),
        migrations.AlterField(
            model_name="tag",
            name="color",
            field=models.CharField(
                default=1,
                help_text="Enter a unique HEX value with the #",
                max_length=7,
                unique=True,
                validators=[recipes.validators.validate_hex_color],
                verbose_name="colour",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="tag",
            name="slug",
            field=models.SlugField(
                default=django.utils.timezone.now,
                help_text="Enter a unique slug",
                max_length=200,
                unique=True,
                validators=[recipes.validators.validate_slug_field],
                verbose_name="slug",
            ),
            preserve_default=False,
        ),
        migrations.AddConstraint(
            model_name="recipeingredient",
            constraint=models.UniqueConstraint(
                fields=("recipe", "ingredient"),
                name="unique_recipe_ingredient",
            ),
        ),
        migrations.AlterModelOptions(
            name="recipeingredient",
            options={
                "default_related_name": "recipe_ingredient",
                "verbose_name": "recipe ingredient",
                "verbose_name_plural": "recipe ingredients",
            },
        ),
        migrations.AlterField(
            model_name="recipe",
            name="image",
            field=models.ImageField(
                help_text="Upload an image<=1MB for your recipe",
                upload_to="recipes/",
                verbose_name="recipe image",
            ),
        ),
    ]
