name: Main Foodgram workflow

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    runs-on: ubuntu-latest # Using ubuntu-latest for consistency with modern runners

    services:
      postgres:
        image: postgres:14.11
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Sticking to 3.9 as per your previous preference
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry # Assuming you use poetry
          poetry install # Install backend dependencies via poetry
      - name: Run backend tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DJANGO_SETTINGS_MODULE: backend.settings
        run: |
          cd backend/
          poetry run pytest # Assuming pytest is run via poetry

  # Docker build/push jobs are temporarily commented out to focus on SSH
  # build_and_push_frontend_docker_img_to_dockerhub:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push frontend Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./frontend/
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  # build_and_push_backend_docker_img_to_docker_hub:
  #   runs-on: ubuntu-latest
  #   needs: backend_tests
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push backend Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./backend/
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  deploy:
    runs-on: ubuntu-latest
    # Temporarily only depends on backend_tests to simplify initial debugging
    needs: backend_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Mask sensitive SSH_KEY in logs
      - name: Mask SSH Key in logs
        run: echo "::add-mask::${{ secrets.SSH_KEY }}"

      # --- Step 1: Test basic SSH connection and remote directory creation ---
      - name: Test SSH Connection and Prepare Remote Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          # Explicitly pass the key. Removed passphrase parameter as key has no passphrase.
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -x # Enable shell debugging
            echo "Attempting SSH connection to ${{ secrets.HOST }} as ${{ secrets.USER }}."
            echo "Checking remote foodgram directory..."
            rm -rf foodgram || echo "foodgram directory did not exist or could not be removed (ignoring error)."
            mkdir -p foodgram || { echo "ERROR: Failed to create foodgram directory on remote."; exit 1; }
            ls -ld foodgram # Show directory permissions and ownership
            echo "SSH connection test and remote directory preparation successful."

  # send_telegram: # Temporarily commented out
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Send Telegram notification
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: Foodgram has been refreshed in builds & deployed successfully to WebSpace.
